import os
import json
import tempfile
from typing import List, Dict, Any

import streamlit as st
from openai import OpenAI
from gtts import gTTS

# ---------- Nastaven√≠ ----------
MODEL_NAME = os.getenv("LLM_MODEL", "gpt-4o-mini")  # klidnƒõ nech takto
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not OPENAI_API_KEY:
    st.error("Chyb√≠ promƒõnn√° prost≈ôed√≠ OPENAI_API_KEY. Nastav ji na Renderu v Settings ‚Üí Environment.")
    st.stop()

client = OpenAI(api_key=OPENAI_API_KEY)

from prompts import SYSTEM_PROMPT, USER_PROMPT_TEMPLATE

st.set_page_config(page_title="Zjednodu≈°ovaƒç metodick√Ωch pokyn≈Ø", page_icon="üß≠", layout="wide")

st.title("üß≠ Zjednodu≈°ovaƒç metodick√Ωch pokyn≈Ø (Elements of AI ‚Äì demo)")
st.caption("Vlo≈æ ve≈ôejn√© metodick√© pokyny (bez citliv√Ωch √∫daj≈Ø). Aplikace vr√°t√≠ srozumiteln√Ω text, sch√©ma a audio.")

with st.sidebar:
    st.header("Nastaven√≠")
    tone = st.selectbox("Styl v√Ωstupu", ["√∫≈ôednƒõ srozumiteln√Ω", "popis pro ve≈ôejnost", "struƒçn√Ω bodov√Ω v√Ωtah"], index=0)
    target_len = st.slider("Po≈æadovan√° d√©lka shrnut√≠ (znaky)", 800, 4000, 1600, 100)
    make_audio = st.checkbox("Vytvo≈ôit audio (MP3)", value=True)
    st.markdown("---")
    st.markdown("**Pozn.:** LLM bƒõ≈æ√≠ serverovƒõ, kl√≠ƒç je v bezpeƒç√≠ v promƒõnn√Ωch prost≈ôed√≠.")

st.subheader("Vstup")
source = st.text_area(
    "Vlo≈æ text metodick√Ωch pokyn≈Ø (ide√°lnƒõ cel√Ω postup, seznam krok≈Ø, role, vstupy/v√Ωstupy, lh≈Øty).",
    height=260,
    placeholder="Sem vlo≈æ metodick√© pokyny‚Ä¶",
)

col1, col2 = st.columns([1,1])
with col1:
    if st.button("‚ñ∂ Zpracovat"):
        if not source or len(source.strip()) < 50:
            st.warning("Pros√≠m vlo≈æ del≈°√≠ text (aspo≈à nƒõkolik vƒõt).")
        else:
            with st.spinner("Zpracov√°v√°m‚Ä¶"):
                # 1) Po≈æ√°d√°me LLM o JSON s ƒç√°stmi: simplified_text + steps (pro diagram)
                user_prompt = USER_PROMPT_TEMPLATE.format(
                    tone=tone, target_len=target_len, source_text=source
                )
                try:
                    resp = client.chat.completions.create(
                        model=MODEL_NAME,
                        temperature=0.2,
                        messages=[
                            {"role": "system", "content": SYSTEM_PROMPT},
                            {"role": "user", "content": user_prompt},
                        ],
                        response_format={"type": "json_object"},
                    )
                    raw = resp.choices[0].message.content
                    data = json.loads(raw)
                except Exception as e:
                    st.error(f"LLM odpovƒõƒè se nepoda≈ôilo zpracovat: {e}")
                    st.stop()

                simplified = data.get("simplified_text", "").strip()
                steps: List[Dict[str, Any]] = data.get("process_steps", [])
                title = data.get("title", "Zjednodu≈°en√© pokyny")

                if not simplified:
                    st.error("Model nevr√°til zjednodu≈°en√Ω text. Zkus pros√≠m del≈°√≠/strukturovanƒõj≈°√≠ vstup.")
                    st.stop()

                st.success("Hotovo!")

                # 2) Zobrazen√≠ srozumiteln√©ho textu
                st.subheader("üìÑ Srozumiteln√Ω dokument")
                st.write(simplified)

                # 3) Sch√©ma procesu (Graphviz DOT -> Streamlit graf)
                def steps_to_dot(steps: List[Dict[str, Any]]) -> str:
                    # Oƒçek√°v√°me polo≈æky: {"id": "S1", "label": "N√°zev kroku", "next": ["S2", "S3"], "role": "HR", "type": "action|decision|start|end"}
                    lines = ["digraph G {", 'rankdir=LR;', 'node [shape=box, style="rounded"];']
                    # uzly
                    for s in steps:
                        label = s.get("label", s.get("id", "Krok"))
                        node_shape = {"start":"oval", "end":"oval", "decision":"diamond"}.get(s.get("type",""), "box")
                        lines.append(f'"{s["id"]}" [label="{label.replace(chr(34), "")}", shape={node_shape}];')
                    # hrany
                    for s in steps:
                        for nx in s.get("next", []):
                            lines.append(f'"{s["id"]}" -> "{nx}";')
                    lines.append("}")
                    return "\n".join(lines)

                if steps:
                    st.subheader("üó∫Ô∏è Sch√©ma procesu")
                    dot = steps_to_dot(steps)
                    st.graphviz_chart(dot, use_container_width=True)
                    with st.expander("Zobrazit DOT k√≥d (pro kop√≠rov√°n√≠ do jin√Ωch n√°stroj≈Ø)"):
                        st.code(dot, language="dot")
                else:
                    st.info("Nepoda≈ôilo se vygenerovat kroky procesu. Zkus do vstupu p≈ôidat oƒç√≠slovan√© kroky a role.")

                # 4) Audio v√Ωstup (gTTS) ‚Äì ƒçe≈°tina
                if make_audio:
                    try:
                        tts = gTTS(text=simplified, lang="cs")
                        tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".mp3")
                        tts.save(tmp.name)
                        st.subheader("üîä Audio shrnut√≠ (MP3)")
                        with open(tmp.name, "rb") as f:
                            st.download_button("St√°hnout audio", f, file_name="shrnut√≠.mp3", mime="audio/mpeg")
                    except Exception as e:
                        st.warning(f"Audio se nepoda≈ôilo vytvo≈ôit: {e}")

with col2:
    st.markdown("### Uk√°zky vhodn√©ho vstupu")
    st.write("""
- **Proces ≈æ√°dosti o studijn√≠ volno**: kdo pod√°v√°, jak√© p≈ô√≠lohy, kdo schvaluje, lh≈Øty, kdy se vrac√≠ k ≈æadateli, co je v√Ωstup.
- **Pracovn√≠ cesta**: zad√°n√≠, schv√°len√≠, vy√∫ƒçtov√°n√≠, kontrola n√°le≈æitost√≠, ulo≈æen√≠ do spisu, role (zamƒõstnanec, nad≈ô√≠zen√Ω, √∫ƒçetn√≠).
- **P≈ôij√≠m√°n√≠ do slu≈æby**: vyhl√°≈°en√≠ V≈ò, p≈ôihl√°≈°ky, posouzen√≠, pohovory, rozhodnut√≠, jmenov√°n√≠, n√°stup, dokumentace.
""")
    st.markdown("---")
    st.caption("Tento n√°stroj je demonstraƒçn√≠, bez z√°ruky. Nevkl√°dej citliv√° data.")
